Функторы, аппликативные функторы и монады предназначены 
для работы со значениями, расположенными в контекстах.
Контексты задаются с помощью типов или функциональных 
значений (function values).

То есть когда функция применяется к контексту, результаты 
получаются различными в зависимости от контекста. Это основная идея, 
на которой базируются функторы, аппликативные функторы, монады, и 
более сложные конструкции.

Если для типа данных реализована функция, аналогичная fmap, 
то тип данных называется функтором.
Но при этом должны выполняться два закона функторов: 
Закон 1.
Пусть id – функция, которая возвращает неизменным значение 
аргумента.
let id x = x
Тогда подъем этой функции в контекст не влияет на вычисление.

Закон 2.
Для двух функций f и g композиция их подъемов эквивалентна 
подъему композиции.

Аппликативные функторы
В этом случае значение упаковано в контекст.
Но в контекст также упакована и сама функция.

Аппликативный функтор считается более гибким средством чем 
обычный функтор, потому что с помощью комбинаций функций apply и 
return можно получить map (fmap). Но обратное невозможно.
Если для типа данных реализованы функции apply и return, в 
соответствии с приведенными выше сигнатурами, то тип данных
называется аппликативным функтором.

Монада применяет к поднятому значению функцию от обычного 
аргумента, которая возвращает поднятое значение.
Существуют функции с неподнятым аргументом и поднятым 
значением. Их невозможно соединить в композицию.
Функция bind применяет функцию и возвращает поднятый результат.
В результате этого поднятые функции можно соединить в композицию.
Основное преимущество монад возможность организации цепочек вычислений 
внутри контекстов.
Если для типа данных реализованы функции bind и return, в 
соответствии с приведенными выше сигнатурами, то тип данных
называется монадой.


!!!!

Функтор. Применяется обычная функция к поднятому значению. 
Аппликативный  функтор.  Применяется  поднятая  функция  к 
поднятому значению.
Монада. К поднятому значению применяется функция от обычного 
аргумента, возвращающая поднятое значение.
Для того, чтобы проверить является ли тип функтором, 
аппликативным функтором или монадой, необходимо реализовать 
соответствующие функции для данных типов и доказать справедливость 
соответствующих законов.
Некоторые типы являются функтором, аппликативным функтором и 
монадой одновременно.

Функтор предоставляет возможность применять функцию к значению внутри контейнера 
при помощи map, не меняя саму структуру контейнера.
Аппликативный функотор расширяет функтор, позволяя работать с функциями, уже 
находящимися в контексте, и комбинировать их с другими значениями того же контекста.
Монада предоставляет мощный механизм для последовательного связывания вычислений, 
позволяющий "вытащить" значение из контекста, обработать его и вернуть результат 
в том же контексте.

